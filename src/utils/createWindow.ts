import { BrowserWindow, dialog } from 'electron';
import isDev from 'electron-is-dev';

import { ContextInitialData } from '../types/IPCChannels';
import { clearNewWindowInitialData, getNewWindowInitialData } from './store';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const handleWindowEvents = (newWindow: BrowserWindow) => {
  newWindow.webContents.on('did-finish-load', () => {
    newWindow.show();
    newWindow.focus();

    const initialData = getNewWindowInitialData();
    clearNewWindowInitialData();
    newWindow.webContents.send(ContextInitialData.loadNewWindowInitialData, initialData);
  });

  newWindow.webContents.on('render-process-gone', async () => {
    const options = {
      type: 'info',
      title: 'Process crashed',
      message: 'This process has crashed',
      buttons: ['Reload', 'Close']
    };
    const buttonClickedIndex = (await dialog.showMessageBox(newWindow, options)).response;

    if (buttonClickedIndex === 0) {
      newWindow.reload();
    } else {
      newWindow.close();
    }
  });

  // TODO: Not detecting process.hang
  newWindow.webContents.on('unresponsive', async () => {
    const options = {
      type: 'info',
      title: 'Process is not responsive',
      message: 'This process is not responding...',
      buttons: ['Reload', 'Close']
    };
    const buttonClickedIndex = (await dialog.showMessageBox(newWindow, options)).response;

    if (buttonClickedIndex === 0) {
      newWindow.reload();
    } else {
      newWindow.close();
    }
  });
};

const createWindow = async () => {
  const newWindow = new BrowserWindow({
    autoHideMenuBar: true,
    show: false,
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });
  newWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  handleWindowEvents(newWindow);

  if (isDev) {
    // Open the DevTools in development only
    newWindow.webContents.openDevTools();
  }

  return newWindow;
};

export default createWindow;
